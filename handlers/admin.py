from telebot.async_telebot import AsyncTeleBot
from telebot.types import Message
from db_manager import DatabaseManager
from states import AdminStates
from reply_keyboards import get_back_keyboard, Buttons
from .common import show_main_menu

def register_admin_handlers(bot: AsyncTeleBot, db: DatabaseManager):
    

    @bot.message_handler(func=lambda msg: msg.text == Buttons.user_count, is_admin=True)
    async def get_user_count(message: Message):
        count = await db.count_users()
        await bot.reply_to(message, f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: <b>{count}</b>", parse_mode='HTML')


    @bot.message_handler(func=lambda msg: msg.text == Buttons.scheduled_mailings, is_admin=True)
    async def list_scheduled_mailings(message: Message):
        mailings = await db.get_scheduled_mailings()
        if not mailings:
            await bot.reply_to(message, "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫.")
            return
        
        response = "<b>üóì –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
        for m_id, creator, s_time, text_preview in mailings:
            response += f"<b>ID:</b> <code>{m_id}</code>\n"
            response += f"<b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> <code>{creator}</code>\n"
            response += f"<b>–í—Ä–µ–º—è:</b> {s_time.strftime('%Y-%m-%d %H:%M')}\n"
            response += f"<b>–¢–µ–∫—Å—Ç:</b> <i>{text_preview}...</i>\n\n"
        
        await bot.reply_to(message, response, parse_mode='HTML')


    @bot.message_handler(func=lambda msg: msg.text == Buttons.set_role, is_admin=True)
    async def start_set_role(message: Message):
        await bot.set_state(message.from_user.id, AdminStates.set_role, message.chat.id)
        await bot.reply_to(message, 
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–æ–ª—å (<code>user</code>, <code>moderator</code>, <code>admin</code>) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.",
            reply_markup=get_back_keyboard(),
            parse_mode='HTML'
        )


    @bot.message_handler(state=AdminStates.set_role)
    async def process_set_role(message: Message):
        parts = message.text.split()
        if len(parts) != 2:
            await bot.reply_to(message, "‚ùóÔ∏è<b>–û—à–∏–±–∫–∞:</b> –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∏ —Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
            return
        
        user_id_str, role = parts
        
        if not user_id_str.isdigit():
            await bot.reply_to(message, f"‚ùóÔ∏è<b>–û—à–∏–±–∫–∞:</b> ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (<code>{user_id_str}</code>) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", parse_mode='HTML')
            return
        
        user_id = int(user_id_str)
        allowed_roles = ['user', 'moderator', 'admin']
        if role not in allowed_roles:
            await bot.reply_to(message, f"‚ùóÔ∏è<b>–û—à–∏–±–∫–∞:</b> –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å '<code>{role}</code>'.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: {', '.join(allowed_roles)}.", parse_mode='HTML')
            return
            
        success = await db.set_user_role(user_id, role)
        
        if success:
            await bot.send_message(message.chat.id, f"‚úÖ –†–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code> —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{role}</b>.", parse_mode='HTML')
        else:
            await bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID <code>{user_id}</code>. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Ö–æ—Ç—è –±—ã —Ä–∞–∑ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.", parse_mode='HTML')
            
        await show_main_menu(bot, message, db)